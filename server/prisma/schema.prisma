generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String         @id @default(uuid())
  sku         String         @unique
  title       String
  description String?
  price       Float
  quantity    Int            @default(0) // simple stock control
  status      ProductStatus  @default(ACTIVE)
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  String?
  images      ProductImage[]
  orderItems  OrderItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Category {
  id       String    @id @default(uuid())
  title    String    @unique
  products Product[]
}

model ProductImage {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  phone     String?
  enabled   Boolean   @default(true)
  createdAt DateTime  @default(now())
  orders    Order[]
  addresses Address[]
  payments  Payment[]
}

model Address {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Only shipping is needed
  shippingOrders Order[]
}

model Payment {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  order         Order?        @relation(fields: [orderId], references: [id])
  orderId       String?
  method        PaymentMethod
  provider      String // e.g., "stripe", "paypal"
  transactionId String?
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  payments    Payment[]

  subtotal       Float
  taxAmount      Float @default(0)
  shippingAmount Float @default(0)
  discountAmount Float @default(0)
  total          Float

  shippingAddress   Address? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?

  orderStatus OrderStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id           String  @id @default(uuid())
  order        Order   @relation(fields: [orderId], references: [id])
  orderId      String
  product      Product @relation(fields: [productId], references: [id])
  productId    String
  productTitle String
  productSku   String
  productImage String?
  unitPrice    Float
  quantity     Int
  lineTotal    Float
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
  RETURNED
}
